@page "/fetchdata"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common.Enums
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}


<Chart Config="_config"></Chart>


@code{

    private LineConfig _config;
    Dictionary<DateTime, (double diff, double v1, double v2)> data;



    //RefillDatasets();
}


@code {
    private WeatherForecast[] forecasts;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async void OnParametersSet()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new ChartJs.Blazor.Common.OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Line Chart"
                },

            }
        };


        var resp = await Http.GetStringAsync("sample-data/20210301_USDZAR20210301_EURSGD.data.json");
        data = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<DateTime, (double diff, double v1, double v2)>>(resp);



        foreach (var color in data.Keys)
        {
            _config.Data.Labels.Add(color.ToString());
        }
        var values = data.Values.Select(x => x.diff);

        var xx = new LineDataset<double>(values)
        {
            BorderColor = "black",
            Label = "Diff",

            Fill = ChartJs.Blazor.Common.Enums.FillingMode.Disabled

        };

        //xx.PointRadius= new[] { 0 };

        _config.Data.Datasets.Add(new LineDataset<double>(values)
        {
            BorderColor = "black",
            Label = "Diff",
            Fill = FillingMode.Disabled
        });


        //base.OnParametersSet();
    }


    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }



    protected override async Task OnInitializedAsync()
    {




        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");

    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
